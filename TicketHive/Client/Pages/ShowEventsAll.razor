@page "/Allevents"
@using TicketHive.Client.Services;
@using TicketHive.Shared.Models;
@inject IEventService eventService;
@inject AuthenticationStateProvider AuthenticationStateProvider;
@inject NavigationManager navigationManager;



<AuthorizeView>
    <Authorized>
        <div class="TheBigContainer d-flex flex-column justify-content-center align-content-center">


            <div class="d-flex flex-column justify-content-center align-items-center">
                <p>Search Event</p>
                <p>Press Enter</p>
                <input type="search" @bind-value="@searchInput" />
            </div>
            <div class="AllCards d-flex flex-wrap row-cols-5 overflow-scroll justify-content-center scrollable-div" style="height: 600px; overflow: scroll; scroll-behavior: smooth;">

                @if (searchInput == null)
                {
                    @foreach (var card in TestEvents)
                    {
                        <div class="test d-flex flex-column flex-wrap  mx-5 mb-5 justify-content-center align-items-center rounded-2" style="background-image: url('@card.ImageUrl');">
                            <div class="d-flex flex-wrap align-items-center justify-content-center">
                                <h1 class="CardTitle-name text-wrap">@card.Name</h1>

                            </div>
                            <div class="EventCard d-flex flex-column border-2 justify-content-center align-content-end">
                                <button class="TheButton rounded-1" @onclick="(() => NavigateToEvent(card.Id))">More info</button>
                            </div>

                        </div>

                    }

                }
                else
                {
                    @foreach (var card in filteredModel.Where(e => e.Name.Contains(searchInput, StringComparison.OrdinalIgnoreCase)))
                    {

                        <div class="test d-flex flex-column flex-wrap  mx-5 mb-5 justify-content-center align-items-center rounded-2" style="background-image: url('@card.ImageUrl');">
                            <div class="d-flex flex-wrap align-items-center justify-content-center">
                                <h1 class="CardTitle-name text-wrap">@card.Name</h1>

                            </div>
                            <div class="EventCard d-flex flex-column border-2 justify-content-center align-content-end">
                                <button class="TheButton rounded-1" @onclick="(() => NavigateToEvent(card.Id))">More info</button>
                            </div>

                        </div>
                    }
                }


            </div>


        </div>
    </Authorized>
    <NotAuthorized>
        <div class="NoAccsess d-flex flex-column justify-content-center align-items-center">

            <h1 class="mb-5">You must be logged in to view events.</h1>
            <img src="https://media4.giphy.com/media/lvQe7YwEEJoaIluvs6/giphy.gif?cid=ecf05e47mnfmryod2c45btbyf02kua8tluxbdt1j8kyj3jui&rid=giphy.gif&ct=g" />

        </div>
    </NotAuthorized>
</AuthorizeView>




















@code {

    private void NavigateToEvent(int eventId)
    {
        navigationManager.NavigateTo($"/AllEvents/{eventId}");
    }


    private string searchInput;
    private List<EventModel> filteredModel => TestEvents.Where(e => e.Name.Contains(searchInput, StringComparison.OrdinalIgnoreCase)).ToList();
    List<EventModel> TestEvents = new();


    protected override async Task OnInitializedAsync()
    {
        
           TestEvents = await eventService.GetEventsAsync();
        
        
    }

}