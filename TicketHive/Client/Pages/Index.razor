@page "/"
@using TicketHive.Client.Services;
@using TicketHive.Server.Enums;
@using TicketHive.Shared.Enums;
@using TicketHive.Shared.Models;
@inject NavigationManager navigationManager
@inject IUserService userService
@inject IEventService eventService
@inject AuthenticationStateProvider authenticationStateProvider


<PageTitle>Index</PageTitle>

<div class="credentials-page d-flex flex-column justify-items-center align-items-center">
<h1>Welcome to Fantastic Rangers!</h1>
<h2> Find Your Events Here!</h2>

<h3 class="mt-5">Already a member..?</h3>
<button @onclick="Login">Login</button>

<h3>Else, please register here:</h3>
<button @onclick="Register">Register</button>

</div>

@if (user != null && theEvent != null)
{
	<h1>@user.Bookings.Count.ToString()</h1>
	<h1>@theEvent.Bookings.Count.ToString()</h1>
	<h1>@theEvent.Bookings[0].BookingDate</h1>
	<h1>@theEvent.Bookings[0].EventId</h1>
	<h1>@theEvent.Bookings[0].Quantity</h1>
}

@code {
	private UserModel user;
	private EventModel theEvent; 

	protected override async Task OnInitializedAsync()
	{
		var authenticationState = await authenticationStateProvider.GetAuthenticationStateAsync();
		var signedInUsersId = authenticationState.User.Claims.FirstOrDefault(c => c.Type == "sub")?.Value;


		user = await userService.GetUserByIdAsync(signedInUsersId);
			theEvent = await eventService.GetEventAsync(6);

		await eventService.BookEventAsync(signedInUsersId, 6, 3);
	}
}