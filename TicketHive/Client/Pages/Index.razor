@page "/"
@using TicketHive.Client.Services;
@using TicketHive.Server.Enums;
@using TicketHive.Shared.Enums;
@using TicketHive.Shared.Models;
@inject NavigationManager navigationManager
@inject IUserService userService
@inject IEventService eventService
@inject AuthenticationStateProvider authenticationStateProvider


<PageTitle>Index</PageTitle>

<div class="credentials-page d-flex flex-column justify-items-center align-items-center">
<h1>Welcome to Fantastic Rangers!</h1>
<h2> Find Your Events Here!</h2>

<h3 class="mt-5">Already a member..?</h3>
<button @onclick="Login">Login</button>

<h3>Else, please register here:</h3>
<button @onclick="Register">Register</button>

</div>

@*Lite kod för att kontrollera att metoderna fungerar*@
@*
@if (responseMessage != null)
{
	<h1>@responseMessage.ReasonPhrase</h1>
	<h1>@responseMessage.Content</h1>
	<h1>@responseMessage.StatusCode</h1>
}

<p>Country was updated: @wasUpdated</p>
<p>Event was added: @eventWasAdded</p>

@if (userModel != null)
{
	<p>@userModel.Username</p>
}
@if (userModel == null)
{
	<p>userModel is null :-(</p>
}

@if (eventModel != null)
{
	<p>@eventModel.Name</p>
}
@if (eventModel == null)
{
	<p>eventModel is null :-(</p>
}
<p>Delete event: @eventIsDeleted</p>

@if (events != null)
{
	<ul>
		@foreach (var e in events)
		{
		<li>@e.Name</li>
		}
	</ul>

	<p>@events[0].Name</p>
}
@if (events == null)
{
	<p>events is null :-(</p>
}

@code {
	private UserModel? userModel;
	private EventModel? eventModel;
	private List<EventModel>? events;
	private bool eventIsDeleted;
	private bool wasUpdated;
	private bool eventWasAdded; 
	private HttpResponseMessage? responseMessage;

	protected override async Task OnInitializedAsync()
	{
		// Get signed in users id 
		var authenticationState = await authenticationStateProvider.GetAuthenticationStateAsync();
		var signedInUsersId = authenticationState.User.Claims.FirstOrDefault(c => c.Type == "sub")?.Value;

		if (authenticationState.User.Identity.IsAuthenticated)
		{
			// Update signed in users password
			responseMessage = await userService.UpdateUserPasswordAsync(signedInUsersId, "Password1234!", "kjUH765478!!!ty");

			// Get signed in user by userId 
			userModel = await userService.GetUserByIdAsync(signedInUsersId);

			// Get event by id
			eventModel = await eventService.GetEventAsync(19);

			// Get all events
			events = await eventService.GetEventsAsync();

			// Delete event
			eventIsDeleted = await eventService.DeleteEventAsync(20);
				
			// Update signed in users Country
			wasUpdated = await userService.UpdateUserCountryAsync(signedInUsersId, Country.Finland);

			// Add event
			var			newEvent = new EventModel
					{
						Name = "New Event Name3",
						EventType = EventType.Concert,	
						Description = "Test description",
						Location = "Test location",
						StartTime = DateTime.Now,
						EndTime = DateTime.Now.AddDays(1),
						Price = 100,
						NumberOfTickets = 100,
						Host = "The Host",
						ImageUrl = "image 1.png"
					};
			eventWasAdded = await eventService.AddEventAsync(newEvent);

			string id = "c5a4dee3-d07e-425c-a2bc-4301e22ad17e";
			if (id != signedInUsersId)
			{
				await userService.DeleteUserAsync(id);
			}
		}
	}
}

*@