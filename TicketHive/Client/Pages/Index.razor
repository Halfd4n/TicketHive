@page "/"
@using TicketHive.Client.Services;
@using TicketHive.Server.Enums;
@using TicketHive.Shared.Models;
@inject NavigationManager navigationManager
@inject IUserService userService
@inject IEventService eventService
@inject AuthenticationStateProvider authenticationStateProvider


<PageTitle>Index</PageTitle>

<div class="credentials-page d-flex flex-column justify-items-center align-items-center">
<h1>Hello, world!</h1>

<p>Already a member..?</p>
<button @onclick="Login">Login</button>

<p>Else, please register here:</p>
<button @onclick="Register">Register</button>

</div>


@*Lite kod för att kontrollera att metoderna fungerar*@

<p>Country was updated: @wasUpdated</p>

@if (userModel != null)
{
	<p>@userModel.Username</p>
}
@if (userModel == null)
{
	<p>userModel is null :-(</p>
}

@if (eventModel != null)
{
	<p>@eventModel.Name</p>
}
@if (eventModel == null)
{
	<p>eventModel is null :-(</p>
}
<p>Delete event: @eventIsDeleted</p>

@if (events != null)
{
	<ul>
		@foreach (var e in events)
		{
		<li>@e.Name</li>
		}
	</ul>
}
@if (events == null)
{
	<p>events is null :-(</p>
}

@code {
	private UserModel? userModel;
	private EventModel? eventModel;
	private List<EventModel>? events;
	private bool eventIsDeleted;
	private bool wasUpdated;

	protected override async Task OnInitializedAsync()
	{
		// Get signed in users id 
		var authenticationState = await authenticationStateProvider.GetAuthenticationStateAsync();
		var userId = authenticationState.User.Claims.FirstOrDefault(c => c.Type == "sub")?.Value;

		if (authenticationState.User.Identity.IsAuthenticated)
		{
			userModel = await userService.GetUserByIdAsync(userId);

			// Get event by id
			eventModel = await eventService.GetEventAsync(2);

			// Get all events
			events = await eventService.GetEventsAsync();

			// Delete event
			eventIsDeleted = await eventService.DeleteEventAsync(3);

			// Update signed in users Country
			wasUpdated = await userService.UpdateUserCountryAsync(userId, Country.Ireland);
		}
	}
}