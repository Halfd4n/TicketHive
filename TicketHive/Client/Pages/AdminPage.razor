@page "/OOF"
@using Microsoft.AspNetCore.Authorization;
@using TicketHive.Client.Services
@using TicketHive.Shared.Enums;
@using TicketHive.Shared.Models;
@attribute [Authorize(Roles = "Admin")]
@inject IEventService service
@inject EventService eventService



<h1>ADMIN PAGE</h1>
<p> TODO: implement admin page</p>

<EditForm Model="@newEvent" OnValidSubmit="@AddEvent">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="name">Name:</label>
        <InputText id="name" class="form-control" @bind-Value="newEvent.Name" />
    </div>

    <div class="form-group">
        <label for="eventType">Event Type:</label>
        <InputSelect id="eventType" class="form-control" @bind-Value="newEvent.EventType">
            @foreach (var type in Enum.GetValues(typeof(EventType)))
            {
                <option value="@type">@type</option>
            }
        </InputSelect>
    </div>

    <div class="form-group">
        <label for="numberOfTickets">Number of Tickets:</label>
        <InputNumber id="numberOfTickets" class="form-control" @bind-Value="newEvent.NumberOfTickets" />
    </div>

    <div class="form-group">
        <label for="description">Description:</label>
        <InputTextArea id="description" class="form-control" @bind-Value="newEvent.Description" />
    </div>

    <div class="form-group">
        <label for="price">Price:</label>
        <InputNumber id="price" class="form-control" @bind-Value="newEvent.Price" />
    </div>

    <div class="form-group">
        <label for="startTime">Start Time:</label>
        <InputDate id="startTime" class="form-control" @bind-Value="newEvent.StartTime" />
    </div>

    <div class="form-group">
        <label for="endTime">End Time:</label>
        <InputDate id="endTime" class="form-control" @bind-Value="newEvent.EndTime" />
    </div>

    <div class="form-group">
        <label for="location">Location:</label>
        <InputText id="location" class="form-control" @bind-Value="newEvent.Location" />
    </div>

    <div class="form-group">
        <label for="host">Host:</label>
        <InputText id="host" class="form-control" @bind-Value="newEvent.Host" />
    </div>

    <div class="form-group">
        <label for="imageUrl">Image URL:</label>
        <InputText id="imageUrl" class="form-control" @bind-Value="newEvent.ImageUrl" />
    </div>

    <button type="submit" class="btn btn-primary">Save Changes</button>
 

</EditForm>

<select @bind="selectedId">
    @if (allEvents != null){
        foreach (var item in allEvents){
            <option value="@item.Id">@item.Name</option>
        }
    }
</select>

<button @onclick="() => DeleteEvent(selectedId)">Delete event</button>





@code {
    private List<EventModel> allEvents;
    private EventModel newEvent { get; set; } = new();
    private EventType eventType { get; set; } = new();
    private bool showAlert = false;
    private string alertMessage;
    private int selectedId;
    private string alertType;


    protected override async Task OnInitializedAsync(){

        allEvents = await eventService.GetEventsAsync();
    }

    private async Task AddEvent(){

        showAlert = true;
    // Add a random picture to the event
        newEvent.ImageUrl = $"image-{new Random().Next(1, 27)}";

        bool isEventAddedSuccessFully = await eventService.AddEventAsync(newEvent);

        if (isEventAddedSuccessFully){
            alertMessage = newEvent.Name + "The event has been added!";
            alertType = "Success!";

            allEvents.Add(newEvent);
        }
        else{
            alertMessage = "Something went wrong, try again!";
            alertType = "Warning";
        }



    }

    private async Task DeleteEvent(int id){
        showAlert = true;
        alertMessage = "The event has been deleted!";
        alertType = "Warning";
        await eventService.DeleteEventAsync(id);
        allEvents.RemoveAll(item => item.Id == id);
    }

}
